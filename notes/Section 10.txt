SECTION 10:Updating resources.
==============================
109> Creating a member edit component.

1. In 3rd prompt,
client>ng g c members/member-edit --skip-tests

2.In app.route.ts file add path of it as fallow
   {path:'member/:edit',component:MemberEditComponent},
3. write code for member-edit.componet.ts file as fallow

import { Component, inject, OnInit } from '@angular/core';
import { Member } from '../../_models/member';
import { AccountService } from '../../_services/account.service';
import { MembersService } from '../../_services/members.service';

@Component({
  selector: 'app-member-edit',
  imports: [],
  templateUrl: './member-edit.component.html',
  styleUrl: './member-edit.component.css'
})
export class MemberEditComponent implements OnInit {

 member?:Member;
 private accountService=inject(AccountService);
 private memberService=inject(MembersService);

 ngOnInit(): void {
  this.loadMember()
}

loadMember(){
  const user=this.accountService.currentUser();

  if(!user) return;

  this.memberService.getMember(user.username).subscribe({
    next:member=>this.member=member
  })
}

}
-----------------------
4. Add navigation link in nav.component.html file for edit dropdown by using routerLink
 as fallows

 @if(accountService.currentUser())
      {
        <div dropdown class="dropdown">
          <a dropdownToggle class="dropdown-toggle text-light text-decoration-none">
            Welcome {{accountService.currentUser()?.username | titlecase}}
          </a>
          <div *dropdownMenu class="dropdown-menu">
            <a routerLink="member/edit" class="dropdown-item">Edit Profile</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" (click)="logout()">Logout</a>

          </div>
        </div>
      }
---------------------------------------------------------
110> Creating the edit template form.
1. first import TabModule and FormModule in member-edit.component.ts file.

import { Component, inject, OnInit } from '@angular/core';
import { Member } from '../../_models/member';
import { AccountService } from '../../_services/account.service';
import { MembersService } from '../../_services/members.service';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-member-edit',
  imports: [TabsModule,FormsModule],
  templateUrl: './member-edit.component.html',
  styleUrl: './member-edit.component.css'
})
export class MemberEditComponent implements OnInit {

 member?:Member;
 private accountService=inject(AccountService);
 private memberService=inject(MembersService);

 ngOnInit(): void {
  this.loadMember()
}

loadMember(){
  const user=this.accountService.currentUser();

  if(!user) return;

  this.memberService.getMember(user.username).subscribe({
    next:member=>this.member=member
  })
}

}
---------------------
2. Copy the code of member-detail.component.html and paste in the member-edit.component.html file
 because we need same code to design it and do changes accourding to our need 
that remove same code i.e Photo and message tab and add some code as fallow

@if(member)
{
    <div class="row">
        <div class="col-4">
           <h1>Your Profile</h1>
        </div>
        <div class="col-8">
            <div class="alert alert-info">
                <p><strong>Information:</strong> 
                    You have made changes.Any unsaveed change will be lost</p>
            </div>
        </div>
        <div class="col-4">
            <div class="card">
               <img
                 src="{{member.photoUrl || './assesrts/user.png'}}"
                 alt="{{member.knownAs}}"
                 class="card-img img-thumbnail"
               >
               <div class="card-body">

                   <div>
                    <strong>Location:</strong>
                    <p>{{member.city}},{{member.country}}</p>
                   </div>


                   <div>
                    <strong>Age:</strong>
                    <p>{{member.age}}</p>
                   </div>


                   <div>
                    <strong>Last Active:</strong>
                    <p>{{member.lastActive}}</p>
                   </div>


                   <div>
                    <strong>Member Since:</strong>
                    <p>{{member.created}}</p>
                   </div>

               </div>
               <div class="card-footer">
                  

                    <button class="btn btn-success col-12" >Save changes</button>
                   

               </div>
            </div>
        </div>

        <div class="col-8">
           <tabset class="member-tabset">
           
                 <tab heading="About {{member.knownAs}}">

                    <form>
                        
                        <h4 class="mt-2">Description</h4>

                        <textarea 
                        class="form-control"
                          name="introduction"
                           [(ngModel)]="member.introduction"
                           rows="6"
                        >

                        </textarea>


                        <h4 class="mt-2">Loking for</h4>

                        <textarea 
                        class="form-control"
                          name="lokingFor"
                           [(ngModel)]="member.lokingFor"
                           rows="6"
                        >

                        </textarea>


                        <h4 class="mt-2">Interests</h4>

                        <textarea 
                        class="form-control"
                          name="Interests"
                           [(ngModel)]="member.interests"
                           rows="6"
                        >

                        </textarea>

                        <h4 class="mt-2">Location Details</h4>

                        <div class="d-flex alert-items-center">

                         <label>City:</label>
                         <input type="text"
                          [(ngModel)]="member.city"
                           class="form-control mx-2"
                           name="city"
                           >

                           <label>country:</label>
                           <input type="text"
                            [(ngModel)]="member.country"
                             class="form-control mx-2"
                             name="country"
                             >
                              
                        </div>

                    </form>
                     
                 </tab>

                 <tab heading="Edit photos">
                    Photo edit will go here
                </tab>

            
           </tabset>
        </div>

    </div>
}
--------------
3. Similarly copy the code of member-detail.component.css to member-edit.component.css file
because we needsame css for both the file.


.img-thumbnail{
    margin: 25px;
    width: 85%;
    height: 85%;
}


.card-body{
    padding:  0 25px;

}

.card-footer{
    padding:  10px  15px;
    background-color: #fff;
    border-top: none;
}

---------------------------------------
111>Adding the Update function.

1. In member-edit.component.ts file,
add code contain inject(Toastrservice),updateMember() function,add 
@ViewChild('editForm') editForm?:ngForm and the code look like as fallows

import { Component, inject, OnInit, ViewChild } from '@angular/core';
import { Member } from '../../_models/member';
import { AccountService } from '../../_services/account.service';
import { MembersService } from '../../_services/members.service';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { FormsModule, NgForm } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-member-edit',
  imports: [TabsModule,FormsModule],
  templateUrl: './member-edit.component.html',
  styleUrl: './member-edit.component.css'
})
export class MemberEditComponent implements OnInit {

@ViewChild('editForm') editForm?:NgForm
 member?:Member;
 private accountService=inject(AccountService);
 private memberService=inject(MembersService);
 private toastr=inject(ToastrService);

 ngOnInit(): void {
  this.loadMember()
}

loadMember(){
  const user=this.accountService.currentUser();

  if(!user) return;

  this.memberService.getMember(user.username).subscribe({
    next:member=>this.member=member
  })
}

updateMember(){
  console.log(this.member);
  this.toastr.success('profile updated successfully');
  this.editForm?.reset(this.member);

}


}
-----------------
2. Change the code of member-edit.component.html file accourding to our needs as fallows

@if(member)
{
    <div class="row">
        <div class="col-4">
           <h1>Your Profile</h1>
        </div>
        <div class="col-8">
           @if(editForm.dirty){
              
            <div class="alert alert-info pb-0">
                <p><strong>Information:</strong> 
                    You have made changes.Any unsaveed change will be lost</p>
            </div>

           }
        </div>
        <div class="col-4">
            <div class="card">
               <img
                 src="{{member.photoUrl || './assesrts/user.png'}}"
                 alt="{{member.knownAs}}"
                 class="card-img img-thumbnail"
               >
               <div class="card-body">

                   <div>
                    <strong>Location:</strong>
                    <p>{{member.city}},{{member.country}}</p>
                   </div>


                   <div>
                    <strong>Age:</strong>
                    <p>{{member.age}}</p>
                   </div>


                   <div>
                    <strong>Last Active:</strong>
                    <p>{{member.lastActive}}</p>
                   </div>


                   <div>
                    <strong>Member Since:</strong>
                    <p>{{member.created}}</p>
                   </div>

               </div>
               <div class="card-footer">
                  

                    <button 
                    [disabled]="!editForm.dirty"
                    form="editForm" type="submit"
                     class="btn btn-success col-12" >
                     Save changes
                    </button>
                   

               </div>
            </div>
        </div>

        <div class="col-8">
           <tabset class="member-tabset">
           
                 <tab heading="About {{member.knownAs}}">

                    <form id="editForm" #editForm="ngForm" (ngSubmit)="updateMember()">
                        
                        <h4 class="mt-2">Description</h4>

                        <textarea 
                        class="form-control"
                          name="introduction"
                           [(ngModel)]="member.introduction"
                           rows="6"
                        >

                        </textarea>


                        <h4 class="mt-2">Loking for</h4>

                        <textarea 
                        class="form-control"
                          name="lokingFor"
                           [(ngModel)]="member.lokingFor"
                           rows="6"
                        >

                        </textarea>


                        <h4 class="mt-2">Interests</h4>

                        <textarea 
                        class="form-control"
                          name="Interests"
                           [(ngModel)]="member.interests"
                           rows="6"
                        >

                        </textarea>

                        <h4 class="mt-2">Location Details</h4>

                        <div class="d-flex alert-items-center">

                         <label>City:</label>
                         <input type="text"
                          [(ngModel)]="member.city"
                           class="form-control mx-2"
                           name="city"
                           >

                           <label>country:</label>
                           <input type="text"
                            [(ngModel)]="member.country"
                             class="form-control mx-2"
                             name="country"
                             >
                              
                        </div>

                    </form>
                     
                 </tab>

                 <tab heading="Edit photos">
                    Photo edit will go here
                </tab>

            
           </tabset>
        </div>

    </div>
}
--------------------------
112>Adding a can Deactive route guard.

1. In 3rd prompt 
  client>ng g guard _guards/prevent-unsaved-changes --skip-tests
-Initially the code of ts file is look as fallow 


import { CanDeactivateFn } from '@angular/router';

export const preventUnsavedChangesGuard: CanDeactivateFn<unknown> = (component, currentRoute, currentState, nextState) => {
  return true;
};

2. then we have to chage the of it as our need as fallow

import { CanDeactivateFn } from '@angular/router';
import { MemberEditComponent } from '../members/member-edit/member-edit.component';

export const preventUnsavedChangesGuard: CanDeactivateFn<MemberEditComponent> = (component) => {
  if(component.editForm?.dirty){
   
    return confirm('Are you sur you want to continue? Any unsaved changes will be lost')
  }
  return true;
 
};
----------------
2. In app.route.ts file change in edit path as fallows

 {path:'member/:edit',component:MemberEditComponent,
                canDeactivate:[preventUnsavedChangesGuard]},
 and it look as fallow 

export const routes: Routes = [
    {path:'',component:HomeComponent},
    {
        path:'',
        runGuardsAndResolvers:'always',
        canActivate:[authGuard],
        children:
        [
            {path:'members',component:MemberListComponent},
           // {path:'members/:id',component:MemberDetailComponent},
            {path:'members/:username',component:MemberDetailComponent},
            {path:'member/:edit',component:MemberEditComponent,
                canDeactivate:[preventUnsavedChangesGuard]},
            {path:'lists',component:ListsComponent},
            {path:'messages',component:MessagesComponent},
        ]
    },
    { path:'errors',component:TestErrorsComponent },
    { path:'not-found',component:NotFoundComponent },
    { path:'server-error',component:ServerErrorComponent },
 
    {path:'**',component:HomeComponent,pathMatch:'full'},
];
------------------
3. add same change in member-edit.component.ts file after @viewchild code 

@HostListener('window:beforunload',['$event']) notify($event:any){
  if(this.editForm?.dirty)
  {
    $event.returnValue=true;
  }
}
 finaly code is 


import { Component, HostListener, inject, OnInit, ViewChild } from '@angular/core';
import { Member } from '../../_models/member';
import { AccountService } from '../../_services/account.service';
import { MembersService } from '../../_services/members.service';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { FormsModule, NgForm } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-member-edit',
  imports: [TabsModule,FormsModule],
  templateUrl: './member-edit.component.html',
  styleUrl: './member-edit.component.css'
})
export class MemberEditComponent implements OnInit {

@ViewChild('editForm') editForm?:NgForm

@HostListener('window:beforunload',['$event']) notify($event:any){
  if(this.editForm?.dirty)
  {
    $event.returnValue=true;
  }
}
 member?:Member;
 private accountService=inject(AccountService);
 private memberService=inject(MembersService);
 private toastr=inject(ToastrService);

 ngOnInit(): void {
  this.loadMember()
}

loadMember(){
  const user=this.accountService.currentUser();

  if(!user) return;

  this.memberService.getMember(user.username).subscribe({
    next:member=>this.member=member
  })
}

updateMember(){
  console.log(this.member);
  this.toastr.success('profile updated successfully');
  this.editForm?.reset(this.member);

}


}
---------------------------
113>Add a new class file in Dtos folder in API- MemberUpdateDto.cs and 
add the properties filed in it as faallows

using System;

namespace API.DTOs;

public class MemberUpdateDto
{
    public string? Introduction {get;set;}
    public string? LokingFor {get;set;}
    public string? Interests {get;set;}
    public string? City {get;set;}
    public string? Country {get;set;}

}
------------
2. Add AutoMapper for this in AutoMapperProfile.cs file

CreateMap<MemberUpdateDto, AppUser>(); and 
it look as fallows

using System;
using API.DTOs;
using API.Entities;
using API.Extensions;
using AutoMapper;

namespace API.Helpers;

public class AutoMapperProfiles:Profile
{
  public AutoMapperProfiles()
  {
    CreateMap<AppUser,MemberDto>()
    .ForMember(d=>d.Age,o=>o.MapFrom(s=>s.DateOfBirth.CalculateAge()))
    .ForMember(d=>d.PhotoUrl,o=>
               o.MapFrom(s=>s.Photos.FirstOrDefault(x=>x.IsMain)!.Url));
    CreateMap<Photo,PhotoDto>();
    CreateMap<MemberUpdateDto, AppUser>();
  }
}
---------------------
3.Add the action Method in UsersController.cs file with add dependency injection 
IMapper mapper in primary costructor of it.

using System.Security.Claims;
using API.Data;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace API.Controllers
{
    // [Route("api/[controller]")]
    // [ApiController]
    [Authorize]
    public class UsersController(IUserRepository userRepository,IMapper mapper) : BaseApiController
    {
       // private readonly DataContext context = context;  No need becouse of primary costructor.
        
        [HttpGet]
        public async Task< ActionResult<IEnumerable<MemberDto>>> GetUsers()
        {
            var users= await userRepository.GetMembersAsync();

            //var usersToReturn=mapper.Map<IEnumerable<MemberDto>>(users);
            
           // return Ok(usersToReturn);
           return Ok(users);
         
        }
            
         
         [HttpGet("{username}")]
        public async Task< ActionResult<MemberDto>> GetUser(string  username)
        {
            var user=await userRepository.GetMemberAsync(username);
        
             if(user==null) return NotFound();
       
             //return mapper.Map<MemberDto>(user);

             return user;

        }

        [HttpPut]
        public async Task<ActionResult> UpdateUser(MemberUpdateDto memberUpdateDto)
        {
            var username=User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if(username==null) return BadRequest("No yourname found in token");

            var user=await userRepository.GetUserByUsernameAsync(username);

            if(user==null) return BadRequest("could not find user");

            mapper.Map(memberUpdateDto,user);
             
             userRepository.Update(user);

            if(await userRepository.SaveAllAsync()) return NoContent();

            return BadRequest("Failed to update the user");
        }
    }
}
---------------------------------
114> Add updataMember(member:Member) method in members.service.ts file as the 
 file is look like that


import { HttpClient, HttpHandler, HttpHeaders } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import { Member } from '../_models/member';
//import { AccountService } from './account.service';
import { retry } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MembersService {
  
  private http=inject(HttpClient);
 // private accountService=inject(AccountService);
  baseUrl=environment.apiUrl;
  

  getMembers(){
    return this.http.get<Member[]>(this.baseUrl+'users');
  }

  getMember(username:string){
    return this.http.get<Member>(this.baseUrl+'users/'+username);
  }

  updateMember(member:Member){
    return this.http.put(this.baseUrl+'users',member);
  }

  // getHttpOptions(){
  //   return{
  //     headers:new HttpHeaders({
  //       Authorization:`Bearer ${this.accountService.currentUser()?.token}`
  //     })
  //   }
  // }
}
-------------
2. similarly change for update method in member-edit.component.ts file as fallows


import { Component, HostListener, inject, OnInit, ViewChild } from '@angular/core';
import { Member } from '../../_models/member';
import { AccountService } from '../../_services/account.service';
import { MembersService } from '../../_services/members.service';
import { TabsModule } from 'ngx-bootstrap/tabs';
import { FormsModule, NgForm } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-member-edit',
  imports: [TabsModule,FormsModule],
  templateUrl: './member-edit.component.html',
  styleUrl: './member-edit.component.css'
})
export class MemberEditComponent implements OnInit {

@ViewChild('editForm') editForm?:NgForm

@HostListener('window:beforunload',['$event']) notify($event:any){
  if(this.editForm?.dirty)
  {
    $event.returnValue=true;
  }
}
 member?:Member;
 private accountService=inject(AccountService);
 private memberService=inject(MembersService);
 private toastr=inject(ToastrService);

 ngOnInit(): void {
  this.loadMember()
}

loadMember(){
  const user=this.accountService.currentUser();

  if(!user) return;

  this.memberService.getMember(user.username).subscribe({
    next:member=>this.member=member
  })
}

updateMember(){
  this.memberService.updateMember(this.editForm?.value).subscribe({
    next:_=>{

      this.toastr.success('profile updated successfully');
     
      this.editForm?.reset(this.member);


    }
  })
  
}


}
----------------------
115> Adding loading indicators.

   -open new bowser type ngx-spinner.
   -open github in new link to check it dependency.
   -from the main browser click the instalation link
   -copy the code of npm i.e npm install ngx-spinner.and install in 3rd prompt.
   -from the main browser,click on the working demo in new link.click on start spinner.and 
  check different type of spinner.
 -from the main browser copy the code of css style
{
  "styles": [
    "node_modules/ngx-spinner/animations/ball-scale-multiple.css" // ===> Add css file based on your animation name(here it's "ball-scale-multiple")
    // You're able to add multiple files if you need
  ]
} 
and paste in angular.json file which look finally as fallow

 "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/font-awesome/css/font-awesome.min.css",
              "node_modules/bootswatch/dist/united/bootstrap.min.css",
              "node_modules/ngx-spinner/animations/line-scale-party.css",
              "node_modules/ngx-toastr/toastr.css",
              "src/styles.css"
            ],
----------------------------
2. In app.config.ts,add it require import with import directive and it look like as
finally-


import { ApplicationConfig, importProvidersFrom, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideToastr } from 'ngx-toastr';
import { errorInterceptor } from './_interceptors/error.interceptor';
import { jwtInterceptor } from './_interceptors/jwt.interceptor';
import {NgxSpinnerModule} from 'ngx-spinner';
import { loadingInterceptor } from './_interceptors/loading.interceptor';


export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
     provideRouter(routes),
     provideHttpClient(withInterceptors([errorInterceptor,jwtInterceptor,loadingInterceptor])),
     provideAnimations(),
     provideToastr({
      positionClass:'toast-bottom-right'
     }),
     importProvidersFrom(NgxSpinnerModule)
    ]
};
-------------------------
3. In 3rd prompt
client>ng g s _services/busy --skip-tests
- open busy.service.ts intially it look as fallow

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class BusyService {

  constructor() { }
}

-write the code for it and it look finally

import { inject, Injectable } from '@angular/core';
import { NgxSpinner, NgxSpinnerService } from 'ngx-spinner';

@Injectable({
  providedIn: 'root'
})
export class BusyService {

  busyRequestCount=0;
  private spinnerService=inject(NgxSpinnerService);
 
  busy(){
    this.busyRequestCount ++;
    this.spinnerService.show(undefined,{
      type:'line-scale-party',
      bdColor:'rgba(255,255,255,0)',
      color:'#333333'
    })
  }
  
  idle(){
    this.busyRequestCount--;
    if(this.busyRequestCount<=0){
      this.busyRequestCount=0;
      this.spinnerService.hide();
    }
  }

}
-------------------------
4. Open 3rd prompt
client>ng g interceptor _interceptors/loading --skip-tests
-open loading.interceptor.ts,it intialy look as fallow


loading interceptor.ts


import { HttpInterceptorFn } from '@angular/common/http';

export const loadingInterceptor: HttpInterceptorFn = (req, next) => {
  return next(req);
};

-write the code for it and it look finally

import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { BusyService } from '../_services/busy.service';
import { delay, finalize } from 'rxjs';

export const loadingInterceptor: HttpInterceptorFn = (req, next) => {

const busyService=inject(BusyService);

busyService.busy();

  return next(req).pipe(
    delay(1000),
    finalize(()=>{
      busyService.idle()
    })
  )
};

------------------------------------
 5. In app.component.ts file, import with directive NgxSpinnerComponent with directive and
it look finally as fallow

//import { CommonModule, NgFor } from '@angular/common';
//import { HttpClient } from '@angular/common/http';
import { Component, inject, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterOutlet } from '@angular/router';
import { NavComponent } from "./nav/nav.component";
import { AccountService } from './_services/account.service';
import { HomeComponent } from "./home/home.component";
import { NgxSpinnerComponent } from 'ngx-spinner';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, NavComponent, HomeComponent,NgxSpinnerComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  
  
  private accountService=inject(AccountService);
  // title = 'DatingApp';
 
  
  ngOnInit(): void {


  this.setCurrentUser();
  }

  setCurrentUser(){
    const userString=localStorage.getItem('user');
    if(!userString) return;
    const user =JSON.parse(userString);
    this.accountService.currentUser.set(user);
  }

}

-----------------------------
6. Now Add <ngx-spinner></ngx-spinner> code in app.component.html file.


<ngx-spinner>

<h3>Loading...</h3>

</ngx-spinner>
<app-nav></app-nav>

<div class="container" style="margin-top: 100px;">
<!-- <app-home></app-home> -->
 <router-outlet></router-outlet>

</div>
--------------------------------------------------
7. Run our application with before use in 2nd prompt use ng serve
-------------------------------------------------------------
116> Using the service to the store state.

1. In member.service.ts file, change the code of it by adding some code and
 it look like as fallows

import { HttpClient, HttpHandler, HttpHeaders } from '@angular/common/http';
import { inject, Injectable, signal } from '@angular/core';
import { environment } from '../../environments/environment';
import { Member } from '../_models/member';
//import { AccountService } from './account.service';
import { of, retry, tap } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class MembersService {
  
  private http=inject(HttpClient);
 // private accountService=inject(AccountService);
  baseUrl=environment.apiUrl;
  members=signal<Member []>([]);
  

  getMembers(){
    return this.http.get<Member[]>(this.baseUrl+'users').subscribe({
      next:members=>this.members.set(members)
    })
  }

  getMember(username:string){

    const member=this.members().find(x=>x.username===username);
    if(member!==undefined) return of(member);

    return this.http.get<Member>(this.baseUrl+'users/'+username);
  }

  updateMember(member:Member){
    return this.http.put(this.baseUrl+'users',member).pipe(
      tap(()=>{
        this.members.update(members=>members.map(m=>m.username===member.username
          ? member:m ))
      })
    )
  }

  // getHttpOptions(){
  //   return{
  //     headers:new HttpHeaders({
  //       Authorization:`Bearer ${this.accountService.currentUser()?.token}`
  //     })
  //   }
  // }
}
--------------------------------
2. Open member-list.component.ts file, add some changes in it and it look like as fallows

import { Component, inject, OnInit } from '@angular/core';
import { MembersService } from '../../_services/members.service';
import { Member } from '../../_models/member';
import { MemberCardComponent } from "../member-card/member-card.component";

@Component({
  selector: 'app-member-list',
  imports: [MemberCardComponent],
  templateUrl: './member-list.component.html',
  styleUrl: './member-list.component.css'
})
export class MemberListComponent implements OnInit {
 
   memberService=inject(MembersService);
 
  ngOnInit(): void {

    if(this.memberService.members().length===0)
    this.loadMember();
    
  }

  loadMember(){
    this.memberService.getMembers();
  }

}
-------------------------------
3.Similarly open member-list.component.html file,change the code of it as fallows

<div class="row">
  
     
   @for (member of memberService.members(); track member.id) {

    <div class="col-2">
   
       <app-member-card [member]="member"></app-member-card>
      </div>
   }

  </div>
--------------------------
4.open file member-details.component.ts file,and the code of it as fallows

import { Component, inject, OnInit } from '@angular/core';
import { MembersService } from '../../_services/members.service';
import { ActivatedRoute } from '@angular/router';
import { Member } from '../../_models/member';
import { TabsModule } from 'ngx-bootstrap/tabs';
import{GalleryItem, GalleryModule, ImageItem} from 'ng-gallery';


@Component({
  selector: 'app-member-detail',
  imports: [TabsModule,GalleryModule],
  templateUrl: './member-detail.component.html',
  styleUrl: './member-detail.component.css'
})
export class MemberDetailComponent implements OnInit {
 

  private memberService=inject(MembersService);
  private route=inject(ActivatedRoute);
  
  member?:Member;
  images:GalleryItem[]=[];


  ngOnInit(): void {

   this.loadMember()
  }

  loadMember(){
    const username=this.route.snapshot.paramMap.get('username');
    if(!username) return;
    this.memberService.getMember(username).subscribe({
      next:member=>{
        this.member=member;
        member.photos.map(p=>{
          this.images.push(new ImageItem({src: p.url,thumb:p.url}))
        })

      }
    })
  }

}

End of section 10
==========================================================================




















