SECTION 4: Authentication Basics
================================

1> AppUser.cs Class


using System;

namespace API.Entities;

public class AppUser
{
  public int Id {get;set;}
  public required string UserName {get;set;}
  public required byte[] PasswordHash {get;set;}
  public required byte[] PasswodSalt {get;set;}

}
---------------------------------

2>Add controller BaseApiController

using System;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers;

 [Route("api/[controller]")]
    [ApiController]

public class BaseApiController:ControllerBase
{

}
-------------------------------------
3> Changes is apply on both Weatherforecost and Userscontroller which is inherit from this 
BaseApiController(Before they inherit from basecontroller)

-a>weatherforcost
-------------------
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers;

// [ApiController]
// [Route("[controller]")]
public class WeatherForecastController : BaseApiController
{
    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private readonly ILogger<WeatherForecastController> _logger;

    public WeatherForecastController(ILogger<WeatherForecastController> logger)
    {
        _logger = logger;
    }

    [HttpGet(Name = "GetWeatherForecast")]
    public IEnumerable<WeatherForecast> Get()
    {
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
        })
        .ToArray();
    }
}
----------------
-b> userscontroller

using API.Data;
using API.Entities;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace API.Controllers
{
    // [Route("api/[controller]")]
    // [ApiController]
    public class UsersController(DataContext context) : BaseApiController
    {
       // private readonly DataContext context = context;  No need becouse of primary costructor.

        [HttpGet]
        public async Task< ActionResult<IEnumerable<AppUser>>> GetUsers()
        {
            var users= await context.Users.ToListAsync();
            
           // return Ok(users);
            return users;


        }

         [HttpGet("{id:int}")]
        public async Task< ActionResult<AppUser>> GetUser(int id)
        {
            var user=await context.Users.FindAsync(id);
            if(user==null)
            return NotFound();
        
        return user;

        }
    }
}
-------------------------------------
 4> Add AccountController
   ======================


using System;
using System.Security.Cryptography;
using System.Text;
using API.Data;
using API.Entities;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers;

public class AccountController(DataContext context):BaseApiController
{
    [HttpPost("register")] //account/register

    public async Task<ActionResult<AppUser>> Register(string Username,string password)
    {
       using var hmac=new HMACSHA512();

       var user=new AppUser
       {
        UserName=Username,
        PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(password)),
        PasswodSalt=hmac.Key
       };

       context.Users.Add(user);
       await context.SaveChangesAsync();

       return user;

    }

}
------------------------------------------------------
5>
Add a classs in RegisterDto.cs in DTOs 

using System;
using System.ComponentModel.DataAnnotations;

namespace API.DTOs;

public class RegisterDto
{
  [Required]
  public required string Username {get;set;}

  [Required]
  public required string Password {get;set;}

}
--------------------------------
6>
//changes in AccountController

using System;
using System.Security.Cryptography;
using System.Text;
using API.Data;
using API.DTOs;
using API.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers;

public class AccountController(DataContext context):BaseApiController
{
    [HttpPost("register")] //account/register

    public async Task<ActionResult<AppUser>> Register(RegisterDto registerDto)
    {
       if(await UserExits(registerDto.Username)) return BadRequest("username is taken");

       using var hmac=new HMACSHA512();

       var user=new AppUser
       {
        UserName=registerDto.Username.ToLower(),
        PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)),
        PasswodSalt=hmac.Key
       };

       context.Users.Add(user);
       await context.SaveChangesAsync();

       return user;

    }

    private async Task<bool>UserExits (string Username)
    {
        return await context.Users.AnyAsync(x=>x.UserName.ToLower()==Username.ToLower()); //Bob!=bob
    }

}
-------------------------------------------------------------------

7>launch.json

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C#: API Debug",
            "type": "dotnet",
            "request": "launch",
            "projectPath": "${workspaceFolder}/API.csproj"
        },
        {
            "name": ".NET Core Attach",
            "type": "coreclr",
            "request": "attach"
        }


    ]
}
----------------------------------------
8> Add LoginDto.cs class in DTOs Folder


using System;

namespace API.DTOs;

public class LoginDto
{
    public required string Username {get;set;}
    public required string Password {get;set;}

}
--------------------------------------------------
9> Add Login end point i.e action method in AccountController

using System;
using System.Security.Cryptography;
using System.Text;
using API.Data;
using API.DTOs;
using API.Entities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers;

public class AccountController(DataContext context):BaseApiController
{
    [HttpPost("register")] //account/register

    public async Task<ActionResult<AppUser>> Register(RegisterDto registerDto)
    {
       if(await UserExits(registerDto.Username)) return BadRequest("username is taken");

       using var hmac=new HMACSHA512();

       var user=new AppUser
       {
        UserName=registerDto.Username.ToLower(),
        PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)),
        PasswodSalt=hmac.Key
       };

       context.Users.Add(user);
       await context.SaveChangesAsync();

       return user;

    }

    [HttpPost("login")]
    public async Task<ActionResult<AppUser>> Login(LoginDto loginDto)
    {
        var user=await context.Users.FirstOrDefaultAsync(x=>
        x.UserName==loginDto.Username.ToLower());

        if(user==null) return Unauthorized("Invalid username");
        
        using var hmac=new HMACSHA512(user.PasswodSalt);

        var computedHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(loginDto.Password));

        for(int i=0;i<computedHash.Length; i++)
        {
            if(computedHash[i] !=user.PasswordHash[i]) return Unauthorized("Invalid password");
        }

        return user;

    }

    private async Task<bool>UserExits (string Username)
    {
        return await context.Users.AnyAsync(x=>x.UserName.ToLower()==Username.ToLower()); //Bob!=bob
    }

}
-----------------------------------------------------------------------------------------------
10> Add interface folder in API - ADD ITokenService.cs interface in it

using System;
using API.Entities;

namespace API.Interfaces;

public interface ITokenService
{
 string CreateToken(AppUser user);
}
--------------------------------------------------
11> Similarlly for TokenService class(Services folder) is done which inherit from ITikenService

using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using API.Entities;
using API.Interfaces;
using Microsoft.IdentityModel.Tokens;

namespace API.Services;

public class TokenService(IConfiguration config) : ITokenService
{
    public string CreateToken(AppUser user)
    {
        var tokenKey= config["TokenKey"] ?? throw new Exception("Cannot access tokenkey from the appsetting");

        if(tokenKey.Length<64) throw new Exception("Your Tokenkey needs to be longer ");

        var key= new SymmetricSecurityKey(Encoding.UTF8.GetBytes(tokenKey));

        var claims=new List<Claim>
        {
            new(ClaimTypes.NameIdentifier,user.UserName)
        };

        var creds=new SigningCredentials(key,SecurityAlgorithms.HmacSha512Signature);

        var tokenDescriptor=new SecurityTokenDescriptor
        {
            Subject=new ClaimsIdentity(claims),
            Expires=DateTime.UtcNow.AddDays(7),
            SigningCredentials=creds

        };

        var tokenHandler=new JwtSecurityTokenHandler();
        var token=tokenHandler.CreateToken(tokenDescriptor);

        return tokenHandler.WriteToken(token);
    }
}
--------------------------------------------------------------------------
12>Add UserDto class in DTOs folder

using System;

namespace API.DTOs;

public class UserDto
{
 public required string Username {get;set;}
 public required string Token {get; set;}
 
}
--------------------------------------------------------
12>  Change the code of account controller again


using System;
using System.Security.Cryptography;
using System.Text;
using API.Data;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace API.Controllers;

public class AccountController(DataContext context,ITokenService tokenService):BaseApiController
{
    [HttpPost("register")] //account/register

    public async Task<ActionResult<UserDto>> Register(RegisterDto registerDto)
    {
       if(await UserExits(registerDto.Username)) return BadRequest("username is taken");

       using var hmac=new HMACSHA512();

       var user=new AppUser
       {
        UserName=registerDto.Username.ToLower(),
        PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)),
        PasswodSalt=hmac.Key
       };

       context.Users.Add(user);
       await context.SaveChangesAsync();

       return new UserDto
       {
        Username=user.UserName,
        Token=tokenService.CreateToken(user)
       };

    }

    [HttpPost("login")]
    public async Task<ActionResult<UserDto>> Login(LoginDto loginDto)
    {
        var user=await context.Users.FirstOrDefaultAsync(x=>
        x.UserName==loginDto.Username.ToLower());

        if(user==null) return Unauthorized("Invalid username");
        
        using var hmac=new HMACSHA512(user.PasswodSalt);

        var computedHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(loginDto.Password));

        for(int i=0;i<computedHash.Length; i++)
        {
            if(computedHash[i] !=user.PasswordHash[i]) return Unauthorized("Invalid password");
        }

       return new UserDto
       {
        Username=user.UserName,
        Token=tokenService.CreateToken(user)
       };

    }

    private async Task<bool>UserExits (string Username)
    {
        return await context.Users.AnyAsync(x=>x.UserName.ToLower()==Username.ToLower()); //Bob!=bob
    }

}
----------------------------------------------------------------------------

13> Add authentication code in program.cs file

 //Jwt Configuration

 builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
 .AddJwtBearer(options =>
 {
    var tokenKey=builder.Configuration["tokenKey"] ?? throw new Exception("TokenKey not Found");
     options.TokenValidationParameters = new TokenValidationParameters
     {
          ValidateIssuer = false,
          ValidateAudience = false,
        //  ValidateLifetime = true,
         ValidateIssuerSigningKey = true,
        //  ValidIssuer = builder.Configuration["Jwt:Issuer"],
        // ValidAudience = builder.Configuration["Jwt:Audience"],
         IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.
         GetBytes(tokenKey)),

     };
 });
app.UseAuthentication();
app.UseAuthorization();
---------------------------------------------------------------------
14> Add Extensions Folder in API
1. Add ApplicationServiceExtensions.cs class in it
copy the code it from program.cs class it look like that

using System;
using API.Data;
using API.Interfaces;
using API.Services;
using Microsoft.EntityFrameworkCore;

namespace API.Extensions;

public static class ApplicationServiceExtensions
{
  public static IServiceCollection AddApplicationServices(this IServiceCollection services,
  IConfiguration config)
  {
    //Copy code from program.cs file.Like add services to the container.
services.AddControllers();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
services.AddOpenApi();



services.AddDbContext<DataContext>(opt=>
{
    opt.UseSqlite(config.GetConnectionString("DefaultConnection"));
});

services.AddCors();

services.AddScoped<ITokenService,TokenService>();
return services;
  }
}

1.2 change the to of program.cs file as fallows

// Add services to the container.
builder.Services.AddApplicationServices(builder.Configuration);
--------------------------------------------------------------
2.Add IdentityServiceExtensions .cs file in Extensions folder
copy the code from program.cs file to it

using System;
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;

namespace API.Extensions;

public static class IdentityServiceExtensions
{
 public static IServiceCollection AddIdentityServices(this IServiceCollection services,
 IConfiguration config)
 {
    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
 .AddJwtBearer(options =>
 {
    var tokenKey=config["tokenKey"] ?? throw new Exception("TokenKey not Found");
     options.TokenValidationParameters = new TokenValidationParameters
     {
          ValidateIssuer = false,
          ValidateAudience = false,
        //  ValidateLifetime = true,
         ValidateIssuerSigningKey = true,
        //  ValidIssuer = builder.Configuration["Jwt:Issuer"],
        // ValidAudience = builder.Configuration["Jwt:Audience"],
         IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.
         GetBytes(tokenKey)),

     };
 });
   return services;
 }
}



2.2 change the to of program.cs file as fallows

// Add //Jwt Configuration.
 builder.Services.AddIdentityServices(builder.Configuration);

------------------------------------------------

Finaly program.cs file look like that

using API.Data;
using API.Interfaces;
using API.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using API.Extensions;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddApplicationServices(builder.Configuration);//Change code of extensions methode.


 //Jwt Configuration

 builder.Services.AddIdentityServices(builder.Configuration);//Change code of extensions methode.



var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
}


app.UseCors(x=>x.AllowAnyHeader().AllowAnyMethod().WithOrigins("http://localhost:4200","https://localhost:4200"));
app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();
----------------------------------------------------------------------
15> 





