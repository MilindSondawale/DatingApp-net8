SECTION 5: Client Login And Register
====================================
1> Add new component in client angular project

copy code from bootstrap cosousel nav class to nav.component.html which look like that

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Carousel</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="#">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Link</a>
          </li>
          <li class="nav-item">
            <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
          </li>
        </ul>
        <form class="d-flex">
          <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-success" type="submit">Search</button>
        </form>
      </div>
    </div>
  </nav>

-----------------------------
change it to according to our needs which finaly that is as fallows

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
         
        </ul>
        <form class="d-flex">
          <input class="form-control me-2" placeholder="Username">
          <input class="form-control me-2" placeholder="Password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
     
    </div>
  </nav>
-----------------------------------------
app.c.html file code


<app-nav></app-nav>


<div class="container" style="margin-top: 100px;">
    <ul>
        <!-- <li *ngFor="let user of users">
            {{user.id}}-{{user.userName}}
    
        </li> -->
    
        @for (user of users; track user.id) {
            <li>
                {{user.id}}-{{user.userName}}
            </li>
        }
    </ul>
</div>
---------------------------------------------------
2> Do code in nav.component.ts file as fallow

import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-nav',
  imports: [FormsModule],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
 
  model:any={};

  login(){
    console.log(this.model);
  }
}
---------------------------------------------------------
3> Do code in nav.component.html file as fallow

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
         
        </ul>
        <form #loginForm="ngForm" (ngSubmit)="login()" class="d-flex" autocomplete="off">
          <input 
          name="username"
          [(ngModel)]="model.username"
           class="form-control me-2"
            placeholder="Username">

          <input
          name="password"
          [(ngModel)]="model.password"
          class="form-control me-2"
           placeholder="Password" type="password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
     
    </div>
  </nav>
----------------------------------------------------------------------------
4>Add angular service in the project and write the code in it

import { HttpClient } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AccountService {
  private http=inject(HttpClient);
  baseUrl='http://localhost:5000/api/';

  login(model:any){
    return this.http.post(this.baseUrl+'account/login',model);
  }

}
----------------------------------------------------------------
5> Add this(above) AccountService into nav.component.ts file as fallow

import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';

@Component({
  selector: 'app-nav',
  imports: [FormsModule],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
  private accountService=inject (AccountService);
  loggedIn=false;
 
  model:any={};

  login(){
    this.accountService.login(this.model).subscribe({
      next:response=>{
        console.log(response);
        this.loggedIn=true;

      },
      error:error=>console.log(error)
     
    })
  }
}
---------------------------------------------------------
6>Add *ngif into the nav.c.html into the <ul> and similarly import it into the ts file.
1.

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
        <ul class="navbar-nav me-auto mb-2 mb-md-0" *ngIf="loggedIn">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
         
        </ul>
        <form #loginForm="ngForm" (ngSubmit)="login()" class="d-flex" autocomplete="off">
          <input 
          name="username"
          [(ngModel)]="model.username"
           class="form-control me-2"
            placeholder="Username">

          <input
          name="password"
          [(ngModel)]="model.password"
          class="form-control me-2"
           placeholder="Password" type="password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
     
    </div>
  </nav>

2.

import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';
import { NgIf } from '@angular/common';

@Component({
  selector: 'app-nav',
  imports: [FormsModule,NgIf],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
  private accountService=inject (AccountService);
  loggedIn=false;
 
  model:any={};

  login(){
    this.accountService.login(this.model).subscribe({
      next:response=>{
        console.log(response);
        this.loggedIn=true;

      },
      error:error=>console.log(error)
     
    })
  }
}

-----------------------
7>we this this above 2 point as aslo fallows with other more functions 
1. nav.c.html file

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
      @if(loggedIn)
      {
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" (click)="logout()">Logout</a>
          </li>
         
        </ul>
      } 


      @if(loggedIn)
      {
        <div class="dropdown">
          <a class="dropwown toggle text-light">WelCome User</a>
          <div class="dropwown-menu">
            <a class="dropwown-item">Edit Profile</a>
            <a class="dropwown-item" (click)="logout()">Logout</a>

          </div>
        </div>
      }


      @if(!loggedIn)
      {
        <form #loginForm="ngForm" (ngSubmit)="login()" class="d-flex" autocomplete="off">
          <input 
          name="username"
          [(ngModel)]="model.username"
           class="form-control me-2"
            placeholder="Username">

          <input
          name="password"
          [(ngModel)]="model.password"
          class="form-control me-2"
           placeholder="Password" type="password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
      }

    </div>
  </nav>

2. nav.c.ts file
Add logout function in it the file is look like that.

import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';


@Component({
  selector: 'app-nav',
  imports: [FormsModule],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
  private accountService=inject (AccountService);
  loggedIn=false;
 
  model:any={};

  login(){
    this.accountService.login(this.model).subscribe({
      next:response=>{
        console.log(response);
        this.loggedIn=true;

      },
      error:error=>console.log(error)
     
    })
  }

  logout(){
    this.loggedIn=false;
  }
}
-------------------------------------------------------
50>app.config.ts file
1.

import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
     provideRouter(routes),
     provideHttpClient(),
     provideAnimations()
    ]
};

2.nav.component.ts file

import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';


@Component({
  selector: 'app-nav',
  imports: [FormsModule,BsDropdownModule],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
  private accountService=inject (AccountService);
  loggedIn=false;
 
  model:any={};

  login(){
    this.accountService.login(this.model).subscribe({
      next:response=>{
        console.log(response);
        this.loggedIn=true;

      },
      error:error=>console.log(error)
     
    })
  }

  logout(){
    this.loggedIn=false;
  }
}

3.nav.component.html file.

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
      @if(loggedIn)
      {
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
         
         
        </ul>
      } 


      @if(loggedIn)
      {
        <div dropdown class="dropdown">
          <a dropdownToggle class="dropdown-toggle text-light text-decoration-none">Welcome User</a>
          <div *dropdownMenu class="dropdown-menu">
            <a class="dropdown-item">Edit Profile</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" (click)="logout()">Logout</a>

          </div>
        </div>
      }


      @if(!loggedIn)
      {
        <form #loginForm="ngForm" (ngSubmit)="login()" class="d-flex" autocomplete="off">
          <input 
          name="username"
          [(ngModel)]="model.username"
           class="form-control me-2"
            placeholder="Username">

          <input
          name="password"
          [(ngModel)]="model.password"
          class="form-control me-2"
           placeholder="Password" type="password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
      }

    </div>
  </nav>

4.  nav.component.css file

.dropdown-toggle, .dropdown-item{
    cursor: pointer;
}
----------------------------------------------------------
51>  Introduction to observables and signals

1>New standard for managing async data include in ES7(ES2006).
2>Instroduce in Angular v2.
3>Observables are lazy collections of multiple values other time.
4>You can think of observables like a newsletter-
   .Only subscribers of the newsletter receive the newsletter.
   .If no-one subscribers to the newsletter it probably will not be printed.

Promises vs Obervables:-

     Promise
 .Provide a single future value
 .Not lazy
 .Can not cancel


    Obervable
  .Emits multiple values over time
  .Lazy
  .Able to cancel
  .Can be used with Map,filter,reduce and other operations


Signals:-
          A signal is a wrapper around a value that notifies interested consumers when that value changes.  
 signals can contain any value,from primitives to complex data structures.

   .Simplicity and readability
   .Performance
   .Predictability
   .Integration

-----------------------------------------------------------------------
52> Persisting the login
1> Add folder _models in app folder
2> Add a file user.ts in this folder(_models)
3> write the code in user.ts file which is as fallows

export interface User{
 
    username:string;
    token:string;

}

4> write the code in account.service.ts file(for the use of segnal)

import { HttpClient } from '@angular/common/http';
import { inject, Injectable, signal } from '@angular/core';
import { User } from '../_models/user';
import { map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AccountService {
  private http=inject(HttpClient);
  baseUrl='http://localhost:5000/api/';
  currentUser = signal<User | null>(null);

  login(model:any){
    return this.http.post<User>(this.baseUrl+'account/login',model).pipe(
      map(user =>{
        if(user){
          localStorage.setItem('user',JSON.stringify(user));
          this.currentUser.set(user);
        }
      })
    )
  }

 logout(){
  localStorage.removeItem('user');
  this.currentUser.set(null);
 }

}


5>Changes the code in app.component.ts file.

//import { CommonModule, NgFor } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Component, inject, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterOutlet } from '@angular/router';
import { NavComponent } from "./nav/nav.component";
import { AccountService } from './_services/account.service';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, NavComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  
  http=inject(HttpClient);
  private accountService=inject(AccountService);
  title = 'DatingApp';
  users:any;
  
  ngOnInit(): void {

  this.getUsers();
  this.setCurrentUser();
  }

  setCurrentUser(){
    const userString=localStorage.getItem('user');
    if(!userString) return;
    const user =JSON.parse(userString);
    this.accountService.currentUser.set(user);
  }

  getUsers(){

    this.http.get('http://localhost:5000/api/users').subscribe({
      next:response=>this.users=response,
      error:error=>console.log(error),
      complete:()=>console.log('Request has completed')

    })

  }
 
}


6> similarly changes in nav.component.ts file as fallows

import { Component, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';
import { BsDropdownModule } from 'ngx-bootstrap/dropdown';


@Component({
  selector: 'app-nav',
  imports: [FormsModule,BsDropdownModule],
  templateUrl: './nav.component.html',
  styleUrl: './nav.component.css'
})
export class NavComponent {
   accountService=inject (AccountService);
  //loggedIn=false;
 
  model:any={};

  login(){ 
    this.accountService.login(this.model).subscribe({
      next:response=>{
        console.log(response);
       // this.loggedIn=true;

      },
      error:error=>console.log(error)
     
    })
  }

  logout(){
    this.accountService.logout();
  }
}

7> Also changes in nav.component.html file also in place of loggedIn to accountService.currentUser which is as fallows

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
      <a class="navbar-brand " href="#">DatingApp</a>
      
      @if(accountService.currentUser())
      {
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link">Matches</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Lists</a>
          </li>
          <li class="nav-item">
            <a class="nav-link">Messages</a>
          </li>
         
         
        </ul>
      } 


      @if(accountService.currentUser())
      {
        <div dropdown class="dropdown">
          <a dropdownToggle class="dropdown-toggle text-light text-decoration-none">Welcome User</a>
          <div *dropdownMenu class="dropdown-menu">
            <a class="dropdown-item">Edit Profile</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" (click)="logout()">Logout</a>

          </div>
        </div>
      }


      @if(!accountService.currentUser())
      {
        <form #loginForm="ngForm" (ngSubmit)="login()" class="d-flex" autocomplete="off">
          <input 
          name="username"
          [(ngModel)]="model.username"
           class="form-control me-2"
            placeholder="Username">

          <input
          name="password"
          [(ngModel)]="model.password"
          class="form-control me-2"
           placeholder="Password" type="password">

          <button class="btn btn-outline-success" type="submit">Login</button>
        </form>
      }

    </div>
  </nav>

run the application.

-------------------------------------------------------------------------
53> Adding a Home Page.
In 3rd prompt add component home
write the code in home.c.html file as fallows

<div class="container mt-5">
  <div style="text-align: center;">
    
    @if(!registerMode)
    {
       
      <h1>Find Your match</h1>
      <p class="lead">Come on it to view your match...all you need to do is sign up!</p>
      <div class="text-center">
        <button class="btn btn-primary btn-lg me-2">Register</button>
        <button class="btn btn-info btn-lg me-2">Learn more </button>

      </div>
    }

    @else
     {
      <div class="container">
        <div class="row-justify-content-center">
            <div class="col-4">
                <p>Register form goes here</p>
            </div>
        </div>
      </div>
    }
     
  </div>

</div>

-Also write the the in home.c.ts file

import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  imports: [],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HomeComponent {
 registerMode=false;

 registerToggle(){
  this.registerMode=!this.registerMode
 }
}

-simiarly do change in app.c.html and app.c.ts file is automaticaly import Home componet namespace

<app-nav></app-nav>

<div class="container" style="margin-top: 100px;">
<app-home></app-home>

</div>

-app.c.ts file look like that

//import { CommonModule, NgFor } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Component, inject, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterOutlet } from '@angular/router';
import { NavComponent } from "./nav/nav.component";
import { AccountService } from './_services/account.service';
import { HomeComponent } from "./home/home.component";

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, NavComponent, HomeComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  
  http=inject(HttpClient);
  private accountService=inject(AccountService);
  title = 'DatingApp';
  users:any;
  
  ngOnInit(): void {

  this.getUsers();
  this.setCurrentUser();
  }

  setCurrentUser(){
    const userString=localStorage.getItem('user');
    if(!userString) return;
    const user =JSON.parse(userString);
    this.accountService.currentUser.set(user);
  }

  getUsers(){

    this.http.get('http://localhost:5000/api/users').subscribe({
      next:response=>this.users=response,
      error:error=>console.log(error),
      complete:()=>console.log('Request has completed')

    })

  }
 
}
--------------------------------------------------------------
54>Adding a register form.
Add component register
-Write the code in register.component.html as below
<form #registerForm="ngForm" (ngSubmit)="register()" autocomplete="off">
 <h2 class="text-center text-primary">Sign up</h2>
 <hr>
 <div class="mb-3 form-floting">
    <input
       type="text"
       class="form-control"
       name="username"
       [(ngModel)]="model.username"
       placeholder="Username"
      >
      <label>Username</label>   

 </div>

 <div class="mb-3 form-floting">
    
    <input
       type="password"
       class="form-control"
       name="password"
       [(ngModel)]="model.password"
       placeholder="Password"
      >
      <label>Password</label>   
      
 </div>

 <div class="form-group text-center">
  <button class="btn btn-success me-2" type="submit" >Register</button>
  <button class="btn btn-default me-2" (click)="cancel()" type="button" >Cancel</button>

 </div>
</form>

-Aslo code in register.c.ts as below

import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-register',
  imports: [FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
 
  model:any={};

  register(){
    console.log(this.model);
  }

  cancel(){
    console.log('cancelled');
  }
}

-Changes code in home.c.html in else part as fallows
 @else
     {
      <div class="container">
        <div class="row justify-content-center">
            <div class="col-4">
                <app-register></app-register>
            </div>
        </div>
      </div>
    }

---------------------------------------------------
55>Parent to Child Communication
-change the code from app.component.ts to home.component.ts and finaly app.c.ts look like that(change code getUsers,
users:any,ngOnInit also)

//import { CommonModule, NgFor } from '@angular/common';
//import { HttpClient } from '@angular/common/http';
import { Component, inject, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterOutlet } from '@angular/router';
import { NavComponent } from "./nav/nav.component";
import { AccountService } from './_services/account.service';
import { HomeComponent } from "./home/home.component";

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, NavComponent, HomeComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  
  
  private accountService=inject(AccountService);
  // title = 'DatingApp';
 
  
  ngOnInit(): void {


  this.setCurrentUser();
  }

  setCurrentUser(){
    const userString=localStorage.getItem('user');
    if(!userString) return;
    const user =JSON.parse(userString);
    this.accountService.currentUser.set(user);
  }

 
 
}

-home.c.ts file look finaly that

import { Component, inject, OnInit } from '@angular/core';
import { RegisterComponent } from "../register/register.component";
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-home',
  imports: [RegisterComponent],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HomeComponent implements OnInit {
  http=inject(HttpClient);

  registerMode=false;
 users:any;

 ngOnInit(): void {
   this.getUsers();
 }

 registerToggle(){
  this.registerMode=!this.registerMode
 }

 getUsers(){

  this.http.get('http://localhost:5000/api/users').subscribe({
    next:response=>this.users=response,
    error:error=>console.log(error),
    complete:()=>console.log('Request has completed')

  })

}
}

-Register.component.ts file and register.component.html is also change according to our needs

r.c.ts file is look like that

import { Component, input } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-register',
  imports: [FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
 usersFromHomeComponent=input.required<any>()
  //@Input() usersFromHomeComponent:any;
 
  model:any={};

  register(){
    console.log(this.model);
  }

  cancel(){
    console.log('cancelled');
  }
}

-similarly r.c.html file is look like that

<form #registerForm="ngForm" (ngSubmit)="register()" autocomplete="off">
 <h2 class="text-center text-primary">Sign up</h2>
 <hr>
 <div class="mb-3 form-floting">
    <input
       type="text"
       class="form-control"
       name="username"
       [(ngModel)]="model.username"
       placeholder="Username"
      >
        <label>Username</label>   

 </div>
 
  <div class="mb-3">
    <label>who is your favourite user?</label>
    <select class="form-select">
      @for (user of usersFromHomeComponent(); track $index) {
        <option [value]="user.userName">
          {{user.userName}}
        </option>
      }
    </select>
  </div> 
  

 <div class="mb-3 form-floting">

    <input
       type="password"
       class="form-control"
       name="password"
       [(ngModel)]="model.password"
       placeholder="Password"
      >
      <label>Password</label>   
      
 </div>

 <div class="form-group text-center">
  <button class="btn btn-success me-2" type="submit" >Register</button>
  <button class="btn btn-default me-2" (click)="cancel()" type="button" >Cancel</button>

 </div>
</form>

---------------------------------------------------------------------------------
56> Child to Parent Communication.

-changes code in register.c.ts file as a  follows 

import { Component, input, output } from '@angular/core';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-register',
  imports: [FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
 usersFromHomeComponent=input.required<any>()
  //@Input() usersFromHomeComponent:any;

  // @Output() cancelRegister=new EventEmitter();
   cancelRegister=output<boolean>();

 
  model:any={};

  register(){
    console.log(this.model);
  }

  cancel(){
    this.cancelRegister.emit(false);
  }
}

-change code in home.c.html file of else part code as fallows

 @else
     {
      <div class="container">
        <div class="row justify-content-center">
            <div class="col-4">
                
                 <app-register [usersFromHomeComponent]="users" (cancelRegister)="cancelRegisterMode($event)"></app-register> 
            </div>
        </div>
      </div>
    }
-------------------------------------------------------------------------------------------------------------
57> Hooking up the register menthod to the service.

-Code in acount.servive.ts file as fallows

import { HttpClient } from '@angular/common/http';
import { inject, Injectable, signal } from '@angular/core';
import { User } from '../_models/user';
import { map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AccountService {
  private http=inject(HttpClient);
  baseUrl='http://localhost:5000/api/';
  currentUser = signal<User | null>(null);

  login(model:any){
    return this.http.post<User>(this.baseUrl+'account/login',model).pipe(
      map(user =>{
        if(user){
          localStorage.setItem('user',JSON.stringify(user));
          this.currentUser.set(user);
        }
        
      })
    )
  }
  register(model:any){
    return this.http.post<User>(this.baseUrl+'account/register',model).pipe(
      map(user =>{
        if(user){
          localStorage.setItem('user',JSON.stringify(user));
          this.currentUser.set(user);
        }
        return user;
      })
    )
  }

 logout(){
  localStorage.removeItem('user');
  this.currentUser.set(null);
 }

}

-code in register.c.ts file
import { Component, inject, input, output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { AccountService } from '../_services/account.service';

@Component({
  selector: 'app-register',
  imports: [FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.css'
})
export class RegisterComponent {
  private accountService=inject(AccountService);
//  usersFromHomeComponent=input.required<any>()
  //@Input() usersFromHomeComponent:any;

  // @Output() cancelRegister=new EventEmitter();
   cancelRegister=output<boolean>();

 
  model:any={};

  register(){
    this.accountService.register(this.model).subscribe({
      next:response=>{
        console.log(response);
      this.cancel();
    },
     error:error=>console.log(error)
  })
     
  
  }

  cancel(){
    this.cancelRegister.emit(false);
  }
}

-remove dropdown code in register.c.html file 
<form #registerForm="ngForm" (ngSubmit)="register()" autocomplete="off">
 <h2 class="text-center text-primary">Sign up</h2>
 <hr>
 <div class="mb-3 form-floting">
    <input
       type="text"
       class="form-control"
       name="username"
       [(ngModel)]="model.username"
       placeholder="Username"
      >
        <label>Username</label>   

 </div>
 
  <!-- <div class="mb-3">
    <label>who is your favourite user?</label>
    <select class="form-select">
      @for (user of usersFromHomeComponent(); track $index) {
        <option [value]="user.userName">
          {{user.userName}}
        </option>
      }
    </select>
  </div>  -->
  

 <div class="mb-3 form-floting">

    <input
       type="password"
       class="form-control"
       name="password"
       [(ngModel)]="model.password"
       placeholder="Password"
      >
      <label>Password</label>   
      
 </div>

 <div class="form-group text-center">
  <button class="btn btn-success me-2" type="submit" >Register</button>
  <button class="btn btn-default me-2" (click)="cancel()" type="button" >Cancel</button>

 </div>
</form>

-remove code in home.c.html file
<div class="container mt-5">
  <div style="text-align: center;">
    
    @if(!registerMode)
    {
       
      <h1>Find Your match</h1>
      <p class="lead">Come on it to view your match...all you need to do is sign up!</p>
      <div class="text-center">
        <button (click)="registerToggle()" class="btn btn-primary btn-lg me-2">Register</button>
        <button class="btn btn-info btn-lg me-2">Learn more </button>

      </div>
    }

    @else
     {
      <div class="container">
        <div class="row justify-content-center">
            <div class="col-4">
                
                 <app-register
                 
                  (cancelRegister)="cancelRegisterMode($event)"></app-register> 
            </div>
        </div>
      </div>
    }
     
  </div>

</div>

-remove home.c.ts file 
import { Component, inject, OnInit } from '@angular/core';
import { RegisterComponent } from "../register/register.component";
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-home',
  imports: [RegisterComponent],
  templateUrl: './home.component.html',
  styleUrl: './home.component.css'
})
export class HomeComponent implements OnInit {
  http=inject(HttpClient);

  registerMode=false;
 users:any;

 ngOnInit(): void {
   this.getUsers();
 }

 registerToggle(){
  this.registerMode=!this.registerMode
 }

 cancelRegisterMode(event:boolean){
 this.registerMode=event;
 }

 getUsers(){

  this.http.get('http://localhost:5000/api/users').subscribe({
    next:response=>this.users=response,
    error:error=>console.log(error),
    complete:()=>console.log('Request has completed')

  })

}
}
---------------------------------------------------------
















