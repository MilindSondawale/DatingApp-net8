SECTION 7: Error handling
==========================
69> Creating an error controller for testing errors.

1.Add BuggyController in controllers folder which inherit from Baseapicontroller and
 write the code for it as falllows

using System;
using API.Data;
using API.Entities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers;

public class BuggyController(DataContext context):BaseApiController
{
  [Authorize]
  [HttpGet("auth")]
  public ActionResult<string> GetAuth()
  {
    return "secret text";
  }


   [HttpGet("not-found")]
  public ActionResult<AppUser> GetNotFound()
  {
    var thing=context.Users.Find(-1);
    if(thing==null)return NotFound();
    return thing;
  }


   [HttpGet("server-error")]
  public ActionResult<AppUser> GetServerError()
  {
    var thing=context.Users.Find(-1) ?? throw new Exception("A bad thing has happened");

    return thing;
  }


   [HttpGet("bad-request")]
  public ActionResult<string> GetBadRequest()
  {
    return BadRequest("This was not a good request");
  }


}

2.Do changes in RegisterDto.cs file as fallows

using System;
using System.ComponentModel.DataAnnotations;

namespace API.DTOs;

public class RegisterDto
{
  [Required]
  public  string Username {get;set;}=string.Empty;

  [Required]
  [StringLength(8,MinimumLength =4)]
  public  string Password {get;set;}=string.Empty;

}
----------------------------------------------------------------
70> Handling server errors

1. In a launchsettings.jso file change from Development to Production and check output in postman and do change back 
in it original code

2.Add try catch bock of code in GetServerError(){..} and check output in postman and do change back 
in it original code

  [HttpGet("server-error")]
  public ActionResult<AppUser> GetServerError()
  {
   try
   {
     var thing=context.Users.Find(-1) ?? throw new Exception("A bad thing has happened");

    return thing;
   }
   catch(Exception ex)
   {
    return StatusCode(500,"Computer say no!");
   }
  }
------------------------------------------------------------------------------------------
71> Exception handling middleware

1. Add new folder in API name is Errors
2.Add a class of name ApiException and write the code in it as fallows

using System;

namespace API.Errors;

public class ApiException(int statusCode, string message, string? details)
{
    public int StatusCode {get;set;}=statusCode;

    public string Message {get;set;}=message;

    public string? Details{get;set;}=details;

}

4. Add new folder in API name is Middleware
5.Add a class of name ExceptionMiddleware and write the code in it as fallows

using System;
using System.Net;
using System.Text.Json;
using API.Errors;
using Microsoft.AspNetCore.Server.HttpSys;

namespace API.Middleware;

public class ExceptionMiddleware(RequestDelegate next,ILogger<ExceptionMiddleware> logger,
IHostEnvironment evn)
{
  public async Task InvokeAsync(HttpContext context)
  {
    try
    {

      await next(context);
    }
    catch(Exception ex)
    {
        logger.LogError(ex,ex.Message);
        context.Response.ContentType="application/json";
        context.Response.StatusCode=(int)HttpStatusCode.InternalServerError;


        var response=evn.IsDevelopment()
        ? new ApiException(context.Response.StatusCode,ex.Message,ex.StackTrace)
        : new ApiException(context.Response.StatusCode,ex.Message,"Internal Server Error");

        var options=new JsonSerializerOptions
        {
            PropertyNamingPolicy=JsonNamingPolicy.CamelCase
        };
        var json=JsonSerializer.Serialize(response,options);

        await context.Response.WriteAsync(json);
    }
  }
}

5.In a program.cs file add middleware in it that is
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
}

app.UseMiddleware<ExceptionMiddleware>();
----------------------------------------------------------------
72>Testing errors in the client

1. In 3rd prompt generate new component errors/test

2. test-error.component.ts file and baseUrl and inject HttpClient and add 
   5 function of different error which look like

import { HttpClient } from '@angular/common/http';
import { Component, inject } from '@angular/core';

@Component({
  selector: 'app-test-errors',
  imports: [],
  templateUrl: './test-errors.component.html',
  styleUrl: './test-errors.component.css'
})
export class TestErrorsComponent {

  baseUrl='http://localhost:5000/api/';
  private http=inject(HttpClient);

  get400Error(){
    this.http.get(this.baseUrl+'buggy/bad-request').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get401Error(){
    this.http.get(this.baseUrl+'buggy/auth').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get404Error(){
    this.http.get(this.baseUrl+'buggy/not-found').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get500Error(){
    this.http.get(this.baseUrl+'buggy/server-error').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
    
  }

  get400ValidationError(){
    this.http.post(this.baseUrl+'account/register',{}).subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
    
  }


}

3. Write the in e-t.c.html file for display with 5 button as fallows

<div>
    <button class="btn btn-outline-primary me-3" (click)="get400Error()">Test 400  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get401Error()">Test 401  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get404Error()">Test 404  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get500Error()">Test 500  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get400ValidationError()">
        Test 400 Validation error
    </button>
</div>

4. Add path in app.route.ts file as fallows

  {
        path:'errors',component:TestErrorsComponent
    },

5. finaly add link of error which show in the nav.c.html file after the if block as fallow

 <ul class="navbar-nav me-auto mb-2 mb-md-0">
          @if(accountService.currentUser())
          {
               <li class="nav-item">
                 <a routerLink="/members" routerLinkActive="active" class="nav-link">Matches</a>
               </li>
               <li class="nav-item">
                 <a routerLink="/lists"  routerLinkActive="active" class="nav-link">Lists</a>
               </li>
                <li class="nav-item">
                  <a routerLink="/messages"  routerLinkActive="active" class="nav-link">Messages</a>
               </li>
          }

          <li class="nav-item">
            <a routerLink="/errors"  routerLinkActive="active" class="nav-link">Errors</a>
          </li>

        </ul>
-------------------------------------------------------------------------------------------
73> Adding an error interceptor

1. In 3rd prompt generate interceptor and write code in ts file of it as fallows

import { HttpInterceptorFn } from '@angular/common/http';
import { inject } from '@angular/core';
import { NavigationExtras, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { catchError } from 'rxjs';

export const errorInterceptor: HttpInterceptorFn = (req, next) => {

  const router=inject(Router);
  const toastr=inject(ToastrService);

  return next(req).pipe(
    catchError(error=>{
      if(error){
        switch (error.status) {
          case 400:
            if(error.error.errors){
              const modalStateErrors=[];
              for(const key in error.error.errors){
                if(error.error.errors[key]){
                 modalStateErrors.push(error.error.errors[key])
                }
              }
              throw modalStateErrors.flat();
            }else{
              toastr.error(error.error,error.status)
            }
            
            break;
            case 401:
              toastr.error('unauthorized',error.status)

              break;
              case 404:
              router.navigateByUrl('/not-found');
              break;
              case 500:
              const navigationExtras:NavigationExtras={state:{error:error.error}}
              router.navigateByUrl('/server-error',navigationExtras);
              break;
          default:
            toastr.error('something unexpected went wrong');
            break;
        }
      }
      throw error;
    })
  )
};

2. Add interceptor in provideHttpClient as fallows 
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient, withInterceptors } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideToastr } from 'ngx-toastr';
import { errorInterceptor } from './_interceptors/error.interceptor';


export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
     provideRouter(routes),
     provideHttpClient(withInterceptors([errorInterceptor])),
     provideAnimations(),
     provideToastr({
      positionClass:'toast-bottom-right'
     })
    ]
};
--------------------------------------------------------------------------
74>Validation error

1. in a file of test-error.c.ts add line validationErrors:string[]=string[];
and change the code of function get400validationerror(){} as fallows

import { HttpClient } from '@angular/common/http';
import { Component, inject } from '@angular/core';

@Component({
  selector: 'app-test-errors',
  imports: [],

  templateUrl: './test-errors.component.html',
  styleUrl: './test-errors.component.css'
})
export class TestErrorsComponent {

  baseUrl='http://localhost:5000/api/';
  private http=inject(HttpClient);
  validationErrors:string[]=[];

  get400Error(){
    this.http.get(this.baseUrl+'buggy/bad-request').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get401Error(){
    this.http.get(this.baseUrl+'buggy/auth').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get404Error(){
    this.http.get(this.baseUrl+'buggy/not-found').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
  }


  get500Error(){
    this.http.get(this.baseUrl+'buggy/server-error').subscribe({
      next:response=>console.log(response),
      error:error=>console.log(error)
    })
    
  }

  get400ValidationError(){
    this.http.post(this.baseUrl+'account/register',{}).subscribe({
         next:response=>console.log(response),
          error:error=>{
            console.log(error);
            this.validationErrors=error;
          }
    
      })

  }
}

2.Add if block in test-error.c.html as fallows
<div>
    <button class="btn btn-outline-primary me-3" (click)="get400Error()">Test 400  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get401Error()">Test 401  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get404Error()">Test 404  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get500Error()">Test 500  error</button>
    <button class="btn btn-outline-primary me-3" (click)="get400ValidationError()">
        Test 400 Validation error
    </button>

    @if(validationErrors.length){
       <div class="row mt-5">
        <ul class="text-danger">
            @for (error of validationErrors; track $index) {
               <li>{{error}}</li>
            }
        </ul>
       </div>
    }
</div>
-------------------------------------------------------------------------
75> Handling not found

1. generate componet not-found and server-error
2. write code in n-f.c.html file as fallows


<div class="container">
    <h1>Not Found </h1>
    <button class="btn btn-info btn-lg" routerLink="/">Return to home page</button>
</div>


3.Import RouterLink in n-f.c.ts file as fallows

import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-not-found',
  imports: [RouterLink],
  templateUrl: './not-found.component.html',
  styleUrl: './not-found.component.css'
})
export class NotFoundComponent {

}

4. Add path in app.route.ts as fallows

import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { MemberListComponent } from './members/member-list/member-list.component';
import { MemberDetailComponent } from './members/member-detail/member-detail.component';
import { ListsComponent } from './lists/lists.component';
import { MessagesComponent } from './messages/messages.component';
import { authGuard } from './_guards/auth.guard';
import { TestErrorsComponent } from './errors/test-errors/test-errors.component';
import { NotFoundComponent } from './errors/not-found/not-found.component';
import { ServerErrorComponent } from './errors/server-error/server-error.component';

export const routes: Routes = [
    {path:'',component:HomeComponent},
    {
        path:'',
        runGuardsAndResolvers:'always',
        canActivate:[authGuard],
        children:
        [
            {path:'members',component:MemberListComponent},
            {path:'members/:id',component:MemberDetailComponent},
            {path:'lists',component:ListsComponent},
            {path:'messages',component:MessagesComponent},
        ]
    },
    { path:'errors',component:TestErrorsComponent },
    { path:'not-found',component:NotFoundComponent },
    { path:'server-error',component:ServerErrorComponent },
 
    {path:'**',component:HomeComponent,pathMatch:'full'},
];
--------------------------------------------------------------------------
76>Adding a server error page

1.Write code in server-error.component.ts file as fallows

import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-server-error',
  imports: [],
  templateUrl: './server-error.component.html',
  styleUrl: './server-error.component.css'
})
export class ServerErrorComponent {
  
  error:any;

  constructor(private router:Router){
    const navigation=this.router.getCurrentNavigation();
    this.error=navigation?.extras?.state?.['error'];
  }

}

2.write code for display in server-error.component.html file as fallows

<h4>Internal Server Error</h4>
@if(error)  {
    <h5 class="text-danger">Error:{{error.message}}</h5>
    <p class="font-weight-bold">Note:If you are seeing this error hten angular is not to blame! </p>
    <p>What to do next?</p>
    <ol>
        <li>  Open chrome dev tools and check the failing network request in the network tab </li>
        <li>  Examin the URL of the failing request </li>
        <li>  Reproduce the error in postman - if you can reproduce the error then angular is not to blame </li>

    </ol>

    <p class="font-weight-bold"> Following is the stack trace - check the first 2 
        lines this tells you exactly which line of code caused the problem!</p>
        <code class="mt-5" style="background-color: whitesmoke;">
           {{error.details  }}
        </code>
}

-In a application click the error of 500 it show output.
--------------------------------------------------------------------------------------------------------------------

