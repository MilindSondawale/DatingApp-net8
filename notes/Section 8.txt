SECTION 8:Extending the API
============================
79> Extending the user entity.

1. Add some Properties in AppUser.cs class

using System;

namespace API.Entities;

public class AppUser
{
  public int Id {get;set;}
  public required string UserName {get;set;}
  public  byte[] PasswordHash {get;set;}=[];
  public  byte[] PasswordSalt {get;set;}=[];
  public DateOnly DateOfBirth {get;set;}
  public required string KnownAs{get;set;}
  public DateTime Created {get;set;}=DateTime.UtcNow;
  public DateTime LastActive {get;set;}=DateTime.UtcNow;
  public required string Gender {get;set;}
  public string? Introduction {get;set;}
  public string? Interests {get;set;}
  public string? LokingFor {get;set;}
  public required string City {get;set;}
  public required string Country {get;set;}
  public List<Photo> Photos {get;set;}=[];


}
--------------
2. Do proccess of creating Photo.cs class and Add properies in it.

namespace API.Entities;

public class Photo
{
    public int Id {get;set;}
    public required string Url {get;set;}
    public bool IsMain {get;set;}
    public string? PublicId {get;set;}
}
--------------------
3. comment code in AccountController.cs

  //    using var hmac=new HMACSHA512();

    //    var user=new AppUser
    //    {
    //     UserName=registerDto.Username.ToLower(),
    //     PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDto.Password)),
    //     PasswordSalt=hmac.Key
    //    };

    //    context.Users.Add(user);
    //    await context.SaveChangesAsync();

    //    return new UserDto
    //    {
    //     Username=user.UserName,
    //     Token=tokenService.CreateToken(user)
    //    };

-Add return ok();before it.
------------------------------
80> Adding a DateTime extension to calculate age.
1. Add new class file DateTimeExtensions.cs file in Extensions folder,make it static class and add code in it.

using System;

namespace API.Extensions;

public static class DateTimeExtensions
{
  public static int CalculateAge(this DateOnly dob)
  {
    var today =DateOnly.FromDateTime(DateTime.Now);
    var age=today.Year-dob.Year;
    if(dob>today.AddYears(-age)) age--;

    return age;
  }
}

2. Add method GetAge() in AppUser.cs class

 public int GetAge(){
    return DateOfBirth.CalculateAge();
  }

-----------------------------------------
81> Entity Framework relationships.

1. Add [table("Photos")] data anotation on the top of Photo class and
 also add navigation propertis on it as fallows

using System.ComponentModel.DataAnnotations.Schema;

namespace API.Entities;

[Table("Photos")]
public class Photo
{
    public int Id {get;set;}
    public required string Url {get;set;}
    public bool IsMain {get;set;}
    public string? PublicId {get;set;}


    //Navigation properties
    public int AppUserId {get;set;}
    public AppUser AppUser{get;set;}=null!;
}

2.open browser to see documentation of microsoft about like introduction of relationship.

3. add migrations UpdatedUserEntity.
------------------------------------------------
82>Generating seed data.

1. Add new file in data folder UserSeedData.json folder and copy snippet to it with 10 record 

------------------------------------
83>Seeding data part one.
1. Add cs file Seed in data folder and write the code for it as fallows 

using System;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using API.Entities;
using Microsoft.EntityFrameworkCore;

namespace API.Data;

public class Seed
{
  public static async Task SeedUsers(DataContext context)
  {
    if(await context.Users.AnyAsync()) return;
    
     var userData=await File.ReadAllTextAsync("Data/UserSeedData");

     var options=new JsonSerializerOptions{PropertyNameCaseInsensitive=true};

     var users=JsonSerializer.Deserialize<List<AppUser>>(userData,options);

     if(users==null) return;

     foreach(var user in users)
     {
       using var hmac=new HMACSHA512();

       user.UserName=user.UserName.ToLower();
       user.PasswordHash=hmac.ComputeHash(Encoding.UTF8.GetBytes("Pa$$w0rd"));
       user.PasswordSalt=hmac.Key;

       context.Users.Add(user);
     }
     await context.SaveChangesAsync();
  }
}

2. Write the code for pending migration after the app.MapControllers(); as fallow

using var scope=app.Services.CreateScope();
var services=scope.ServiceProvider;

try
{
    var context=services.GetRequiredService<DataContext>();
    await context.Database.MigrateAsync();
    await Seed.SeedUsers(context);
}
catch (Exception ex)
{
    
    var logger=services.GetRequiredService<ILogger<Program>>();
    logger.LogError(ex,"An error occured during migration");
}
------------------------------------
84> Seeding data part two.

1. 1st prompt drop database fire command it drop database and again dotnet watch command it include database with Photo and
User table with different column.
---------------------------------------------
85>The Repository Pattern

1. Only theorotical part cover in this lesson.
-----------------------------------------------
86>Creating repository.

1. Add new interface IUserRepository in interfaces folder and write code for it as fallows

using System;
using API.Entities;

namespace API.Interfaces;

public interface IUserRepository
{
 void Update (AppUser user);
 Task<bool>SaveAllAsync();
 Task<IEnumerable<AppUser>> GetUsersAsync();
 Task<AppUser?>GetUserByIdAsync(int id);
 Task<AppUser?>GetUserByUsernameAsync(string username);
}
---------------------------
2. Add new class file UserRepository in Data folder and write code for it as fallows

using System;
using API.Entities;
using API.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace API.Data;

public class UserRepository(DataContext context) : IUserRepository
{
    public async Task<AppUser?> GetUserByIdAsync(int id)
    {
       return await context.Users.FindAsync(id);
    }

    public async Task<AppUser?> GetUserByUsernameAsync(string username)
    {
        return await context.Users.SingleOrDefaultAsync(x=>x.UserName==username);
    }

    public async Task<IEnumerable<AppUser>> GetUsersAsync()
    {
        return await context.Users.ToListAsync();
    }

    public async Task<bool> SaveAllAsync()
    {
        return await context.SaveChangesAsync()>0;
    }

    public void Update(AppUser user)
    {
        context.Entry(user).State=EntityState.Modified;
    }
}
--------------------------------------------------------
3. Add service of it in ApplicationServiceExtensions.cs file

services.AddScoped<IUserRepository,UserRepository>();
----------------------------------------------------------------
87> Updating the Users Controller.

1. Do changes in UsersController as fallows

using API.Data;
using API.Entities;
using API.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace API.Controllers
{
    // [Route("api/[controller]")]
    // [ApiController]
    [Authorize]
    public class UsersController(IUserRepository userRepository) : BaseApiController
    {
       // private readonly DataContext context = context;  No need becouse of primary costructor.
        
        [HttpGet]
        public async Task< ActionResult<IEnumerable<AppUser>>> GetUsers()
        {
            var users= await userRepository.GetUsersAsync();
            
            return Ok(users);
         
        }
            
         
         [HttpGet("{username}")]
        public async Task< ActionResult<AppUser>> GetUser(string  username)
        {
            var user=await userRepository.GetUserByUsernameAsync(username);
        
             if(user==null) return NotFound();
       
             return  user;

        }
    }
}
-----------------
2. Also do change in GetUserByUsernameAsync() and GetUsersAsync() method in UserRepository class.

using System;
using API.Entities;
using API.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace API.Data;

public class UserRepository(DataContext context) : IUserRepository
{
    public async Task<AppUser?> GetUserByIdAsync(int id)
    {
       return await context.Users.FindAsync(id);
    }

    public async Task<AppUser?> GetUserByUsernameAsync(string username)
    {
        return await context.Users
        .Include(x=>x.Photos)
        .SingleOrDefaultAsync(x=>x.UserName==username);
    }

    public async Task<IEnumerable<AppUser>> GetUsersAsync()
    {
        return await context.Users
        .Include(x=>x.Photos)
        .ToListAsync();
    }

    public async Task<bool> SaveAllAsync()
    {
        return await context.SaveChangesAsync()>0;
    }

    public void Update(AppUser user)
    {
        context.Entry(user).State=EntityState.Modified;
    }
}
-----------------------------
3. check in postman output.
------------------------------------------------------------
88> Adding a DTO for Members

1.  In a DTOs folder add a class MemberDto.cs and copy here properties in AppUser.cs class
  and also generate PhotoDto class as we do priviusly and add properties field here 

MemberDto.cs file

using System;

namespace API.DTOs;

public class MemberDto
{
    
  public int Id {get;set;}
  public string? UserName {get;set;}
  public int Age {get;set;}
  public string? PhotoUrl {get;set;}
  public string? KnownAs{get;set;}
  public DateTime Created {get;set;}
  public DateTime LastActive {get;set;}
  public string? Gender {get;set;}
  public string? Introduction {get;set;}
  public string? Interests {get;set;}
  public string? LokingFor {get;set;}
  public  string? City {get;set;}
  public string? Country {get;set;}
  public List<PhotoDto>? Photos {get;set;}

}
--------------------
2. PhotoDto.cs file 

namespace API.DTOs;

public class PhotoDto
{
    public int Id{get;set;}
    public string? Url{get;set;}
    public bool IsMain{get;set;}
}
------------------------------------
89> Adding AutoMapper

1. Add folder Helphers in API and add a class AutoMapperProfile.cs. This class
is inherit from automapper predefine class and write code for it.

using System;
using API.DTOs;
using API.Entities;
using AutoMapper;

namespace API.Helpers;

public class AutoMapperProfiles:Profile
{
  public AutoMapperProfiles()
  {
    CreateMap<AppUser,MemberDto>();
    CreateMap<Photo,PhotoDto>();
  }
}
----------------------------------
2. add service of automapper in AppServiceExtensions.cs class as fallows
services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
------------------------------------------------------------------------
90>Using AutoMapper

1. Change code in UsersController and run application in postman
  UsersController code

using API.Data;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace API.Controllers
{
    // [Route("api/[controller]")]
    // [ApiController]
    [Authorize]
    public class UsersController(IUserRepository userRepository,IMapper mapper) : BaseApiController
    {
       // private readonly DataContext context = context;  No need becouse of primary costructor.
        
        [HttpGet]
        public async Task< ActionResult<IEnumerable<MemberDto>>> GetUsers()
        {
            var users= await userRepository.GetUsersAsync();

            var usersToReturn=mapper.Map<IEnumerable<MemberDto>>(users);
            
            return Ok(usersToReturn);
         
        }
            
         
         [HttpGet("{username}")]
        public async Task< ActionResult<MemberDto>> GetUser(string  username)
        {
            var user=await userRepository.GetUserByUsernameAsync(username);
        
             if(user==null) return NotFound();
       
             return mapper.Map<MemberDto>(user);

        }
    }
}
-----------------------------------------------------------
91> Configuring AutoMapper

 1. Change code in AutoMapperProfile and run application in postman it show photoUrl of all record.

using System;
using API.DTOs;
using API.Entities;
using AutoMapper;

namespace API.Helpers;

public class AutoMapperProfiles:Profile
{
  public AutoMapperProfiles()
  {
    CreateMap<AppUser,MemberDto>()
    .ForMember(d=>d.PhotoUrl,o=>
               o.MapFrom(s=>s.Photos.FirstOrDefault(x=>x.IsMain)!.Url));
    CreateMap<Photo,PhotoDto>();
  }
}
------------------------------------
92> Using AutoMapper queryable extensions

1.  Add 2 method without method body in IUserRepository at the last of interface

using System;
using API.DTOs;
using API.Entities;

namespace API.Interfaces;

public interface IUserRepository
{
 void Update (AppUser user);
 Task<bool>SaveAllAsync();
 Task<IEnumerable<AppUser>> GetUsersAsync();
 Task<AppUser?>GetUserByIdAsync(int id);
 Task<AppUser?>GetUserByUsernameAsync(string username);
 Task<IEnumerable<MemberDto>>GetMembersAsync();
 Task<MemberDto?>GetMemberAsync(string username);
}
------------------

2. implement this method in UserRepository class which look like as fallow

using System;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;

namespace API.Data;

public class UserRepository(DataContext context,IMapper mapper) : IUserRepository
{
    public async Task<MemberDto?> GetMemberAsync(string username)
    {
        return await context.Users
        .Where(x=>x.UserName==username)
        .ProjectTo<MemberDto>(mapper.ConfigurationProvider)
        .SingleOrDefaultAsync();
    }

    public async Task<IEnumerable<MemberDto>> GetMembersAsync()
    {
        return await context.Users
        .ProjectTo<MemberDto>(mapper.ConfigurationProvider)
        .ToListAsync();
    }

    public async Task<AppUser?> GetUserByIdAsync(int id)
    {
       return await context.Users.FindAsync(id);
    }

    public async Task<AppUser?> GetUserByUsernameAsync(string username)
    {
        return await context.Users
        .Include(x=>x.Photos)
        .SingleOrDefaultAsync(x=>x.UserName==username);
    }

    public async Task<IEnumerable<AppUser>> GetUsersAsync()
    {
        return await context.Users
        .Include(x=>x.Photos)
        .ToListAsync();
    }

    public async Task<bool> SaveAllAsync()
    {
        return await context.SaveChangesAsync()>0;
    }

    public void Update(AppUser user)
    {
        context.Entry(user).State=EntityState.Modified;
    }
}
--------------------------------------------------
3. Change code in UsersController look like as fallows

using API.Data;
using API.DTOs;
using API.Entities;
using API.Interfaces;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace API.Controllers
{
    // [Route("api/[controller]")]
    // [ApiController]
    [Authorize]
    public class UsersController(IUserRepository userRepository) : BaseApiController
    {
       // private readonly DataContext context = context;  No need becouse of primary costructor.
        
        [HttpGet]
        public async Task< ActionResult<IEnumerable<MemberDto>>> GetUsers()
        {
            var users= await userRepository.GetMembersAsync();

            //var usersToReturn=mapper.Map<IEnumerable<MemberDto>>(users);
            
           // return Ok(usersToReturn);
           return Ok(users);
         
        }
            
         
         [HttpGet("{username}")]
        public async Task< ActionResult<MemberDto>> GetUser(string  username)
        {
            var user=await userRepository.GetMemberAsync(username);
        
             if(user==null) return NotFound();
       
             //return mapper.Map<MemberDto>(user);

             return user;

        }
    }
}
-------------------------------
4. Cooment GetAge() method in AppUser.cs class
-------------------------------------------------
5. Change code in AutoMapperProfile.cs clas

using System;
using API.DTOs;
using API.Entities;
using API.Extensions;
using AutoMapper;

namespace API.Helpers;

public class AutoMapperProfiles:Profile
{
  public AutoMapperProfiles()
  {
    CreateMap<AppUser,MemberDto>()
    .ForMember(d=>d.Age,o=>o.MapFrom(s=>s.DateOfBirth.CalculateAge()))
    .ForMember(d=>d.PhotoUrl,o=>
               o.MapFrom(s=>s.Photos.FirstOrDefault(x=>x.IsMain)!.Url));
    CreateMap<Photo,PhotoDto>();
  }
}
------------------------------------------------------------
6. Run application on the postman to check the result
================================================================



